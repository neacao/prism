#!/usr/bin/env python2.7

import sys, copy
sys.path.insert(0, 'Resource')
sys.path.insert(0, 'Prism')
sys.path.insert(0, '../data')

import prism_compute as Computer
import prism_encode_adv as Encoder
import prism_extension_adv as Prism
import data_handler as Data
from constant import *
from util import *


def processExtension(result, lastFrequent,
 lastSeqBlocks, lastOffsets, lastPosBlocks, 
 seqBlocksList, posOffsetsList, posBlocksList, 
 items, isSeqExt):
	
	lengthOfItems = len(items)

	for itemIndex in xrange(0, lengthOfItems):
		curItem 							= items[itemIndex]
		seqBlockTarget 				= seqBlocksList[itemIndex]
		posOffsetsListTarget 	= posOffsetsList[itemIndex]
		posBlocksTarget 			= posBlocksList[itemIndex]

		# Avoid duplicate labeling if extend itemset
		if isSeqExt == False and string(lastFrequent).findAdv(curItem) != -1:
			continue

		# print "Last frequent {0} extendSeq {1} with currentItem {2}".format(lastFrequent, isSeqExt, curItem)

		(seqBlocksExt, posOffsetsExt, posBlocksExt) = Prism.extend(
			lastFrequent, curItem,
			lastSeqBlocks, seqBlockTarget,
			lastOffsets, posOffsetsListTarget,
			lastPosBlocks, posBlocksTarget,
			isSeqExt
		)

		supp = Computer.computeSupportOfPrimalValueArray(seqBlocksExt)

		if supp >= MIN_SUPP:
			if isSeqExt == True:
				lastFrequent += "->{0}".format(curItem)
			else:
				lastFrequent += ".{0}".format(curItem)

			# Ensure to make a copy instead of assign reference
			_lastSeqBlocks 	= copy.deepcopy(seqBlocksExt)
			_lastPosOffsets = copy.deepcopy(posOffsetsExt)
			_lastPosBlocks 	= copy.deepcopy(posBlocksExt)

			processExtension(result, lastFrequent, _lastSeqBlocks, _lastPosOffsets, _lastPosBlocks, seqBlocksList, posOffsetsList, posBlocksList, items, True)
			processExtension(result, lastFrequent, _lastSeqBlocks, _lastPosOffsets, _lastPosBlocks, seqBlocksList, posOffsetsList, posBlocksList, items, False)

			result.append({
				"frequent": lastFrequent,
				"support": supp
			})

			numerOfCharsRemove = len(curItem)
			if isSeqExt == True:
				numerOfCharsRemove += 2
			else:
				numerOfCharsRemove += 1

			lastFrequent = lastFrequent[:-numerOfCharsRemove]

	return
 

if __name__ == "__main__":

	(sequences, items) = Data.loadData()
	# for seq in sequences:
	# 	# print type(seq[0])
	# 	print seq[0]
	# print "=" * 50
	# print items
	# exit(0)

	(itemsPosBlocks, itemsPosOffsets) = Encoder.processEncodePrimalBlockAllSequences(items, sequences)
	seqBlocks = Encoder.processEncodePrimalSeqAdv(items, sequences)

	numberOfItems = len(items)
	result = [[]] * numberOfItems

	for index in xrange(0, numberOfItems):
		processExtension(result[index], items[index], 
			seqBlocks[index], itemsPosOffsets[index], itemsPosBlocks[index], 
			seqBlocks, itemsPosOffsets, itemsPosBlocks,
			items, True
		)

		processExtension(result[index], items[index], 
			seqBlocks[index], itemsPosOffsets[index], itemsPosBlocks[index], 
			seqBlocks, itemsPosOffsets, itemsPosBlocks,
			items, False
		)

	# for element in result[index]:
	# 	print "{0} - {1}".format(element["frequent"], element["support"])
	
	testCase = "H.G->Q"
	for element in result[index]:	 
		isExist = True if element["frequent"].find(testCase) != -1 else False
		if isExist:
			print "{0} - {1}".format(element["frequent"], element["support"])






