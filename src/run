#!/usr/bin/env python3

import sys, copy, json
sys.path.insert(0, 'Resource')
sys.path.insert(0, 'Prism')
sys.path.insert(0, '../data')

import prism_compute as Computer
import prism_encode_adv as Encoder
import prism_extension_adv as Prism
import dataHandler as Data
from constant import *
from helper import *

TRAIN_DATA_PATH = "Resource/trained.data"
HACK = 0

def processExtension(result, lastFrequent,
 lastSeqBlocks, lastOffsets, lastPosBlocks, lastItemIndex,
 seqBlocksList, posOffsetsList, posBlocksList, 
 items, isSeqExt):
	
	lengthOfItems = len(items)
	global HACK
	HACK += 1

	for itemIndex in range(lastItemIndex, lengthOfItems):
		curItem 							= items[itemIndex]
		seqBlockTarget 				= seqBlocksList[itemIndex]
		posOffsetsListTarget 	= posOffsetsList[itemIndex]
		posBlocksTarget 			= posBlocksList[itemIndex]

		# if HACK == 20:
		# 	exit(0)

		# Avoid duplicate labeling if extend itemset
		# if isSeqExt == False and string(lastFrequent).findAdv(curItem) != -1:
		# 	#print "Ignore {0} from {1}".format(curItem, lastFrequent)
		# 	continue

		# #print "Last frequent {0} extendSeq {1} with currentItem {2}".format(lastFrequent, isSeqExt, curItem)

		(seqBlocksExt, posOffsetsExt, posBlocksExt) = Prism.extend(
			lastFrequent, curItem,
			lastSeqBlocks, seqBlockTarget,
			lastOffsets, posOffsetsListTarget,
			lastPosBlocks, posBlocksTarget,
			isSeqExt
		)

		supp = Computer.computeSupportOfPrimalValueArray(seqBlocksExt)
		# print("Process {2} {3} , got seqBlocksExt{0} , support: {1}".format(seqBlocksExt, supp, lastFrequent, curItem))

		if supp >= MIN_SUPP:
			# print("key {0} targetKey {1} isSeqExt {2}".format(lastFrequent, curItem, isSeqExt))
			# print("seqBlockExt {0} has support {1}".format(seqBlocksExt, supp))
			if isSeqExt == True:
				lastFrequent += "->{0}".format(curItem)
			else:
				lastFrequent += ".{0}".format(curItem)

			# Ensure to make a copy instead of assign reference
			_lastSeqBlocks 	= copy.deepcopy(seqBlocksExt)
			_lastPosOffsets = copy.deepcopy(posOffsetsExt)
			_lastPosBlocks 	= copy.deepcopy(posBlocksExt)

			# Sequence extension
			processExtension(result, lastFrequent, _lastSeqBlocks, _lastPosOffsets, _lastPosBlocks, 0, 
				seqBlocksList, posOffsetsList, posBlocksList, items, True)

			# Itemset extension
			processExtension(result, lastFrequent, _lastSeqBlocks, _lastPosOffsets, _lastPosBlocks, itemIndex + 1, 
				seqBlocksList, posOffsetsList, posBlocksList, items, False) 

			result.append({
				"frequent": lastFrequent,
				"support": supp
			})

			numerOfCharsRemove = len(curItem)
			if isSeqExt == True:
				numerOfCharsRemove += 2
			else:
				numerOfCharsRemove += 1

			lastFrequent = lastFrequent[:-numerOfCharsRemove]

	return
 

def save(result):
	with open(TRAIN_DATA_PATH, "w") as fp:
		json.dump(result, fp)


def train():
	(sequences, items) = Data.loadData()

	# Sorted to make sure item will not overlap each other when process item extension
	items = sorted(items)
	sequences = [sortAdv(seq) for seq in sequences]

	(itemsPosBlocks, itemsPosOffsets) = Encoder.processEncodePrimalBlockAllSequences(items, sequences)
	seqBlocks = Encoder.processEncodePrimalSeqAdv(items, sequences)

	numberOfItems = len(items)
	result = [] * numberOfItems

	for index in range(0, numberOfItems):
		processExtension(result, items[index], 
			seqBlocks[index], itemsPosOffsets[index], itemsPosBlocks[index], 0,
			seqBlocks, itemsPosOffsets, itemsPosBlocks,
			items, True
		)

		processExtension(result, items[index], 
			seqBlocks[index], itemsPosOffsets[index], itemsPosBlocks[index], index + 1,
			seqBlocks, itemsPosOffsets, itemsPosBlocks,
			items, False
		)
	
	for element in result:
		print("{0} - {1}".format(element["frequent"], element["support"]))
	
	save(result)


def loadDataTrained():
	with open(TRAIN_DATA_PATH) as fp:
		trainedData = json.load(fp)
	return trainedData


def predict(query):
	trainedData = loadDataTrained()

	for element in trainedData:
		isExist = True if element["frequent"].find(query) != -1 else False
		if isExist:
			print("{0} - {1}".format(element["frequent"], element["support"]))

	return


def usage():
	print("./run train | predict ...")


if __name__ == "__main__":
	argv = sys.argv
	if len(argv) < 2:
		usage()
		exit(0)
		
	func = argv[1]

	if func == "train":
		train()

	elif func == "predict":
		query = argv[2]
		predict(query)

	else:
		usage()




