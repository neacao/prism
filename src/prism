#!/usr/bin/env python

import sys, copy
sys.path.insert(0, '/Users/nea/Desktop/Course/src/advance')

from util import *
from constant import *
from prism_compute import *
from prism_encode_adv import *
from prism_extension_adv import *

def processExtension(result, lastFrequent,
 lastSeqBlocks, lastOffsets, lastPosBlocks, 
 seqBlocksList, posOffsetsList, posBlocksList, 
 items, isSeqExt):
	lengthOfItems = len(items)

	for itemIndex in xrange(0, lengthOfItems):
		curItem 							= items[itemIndex]
		seqBlockTarget 				= seqBlocksList[itemIndex]
		posOffsetsListTarget 	= posOffsetsList[itemIndex]
		posBlocksTarget 			= posBlocksList[itemIndex]

		# Continue if it's in itemset extension with same item
		if isSeqExt == False and lastFrequent.find(curItem) != -1:
			continue

		(seqBlocksExt, posOffsetsExt, posBlocksExt) = processExtensionAdv(
			lastFrequent, curItem,
			lastSeqBlocks, seqBlockTarget,
			lastOffsets, posOffsetsListTarget,
			lastPosBlocks, posBlocksTarget,
			isSeqExt
		)

		supp = computeSupportOfPrimalValueArray(seqBlocksExt)
		if supp >= MIN_SUPP:
			if isSeqExt == True:
				lastFrequent += "->{0}".format(curItem)
			else:
				lastFrequent += "{0}".format(curItem)

			# Ensure to make a copy instead of assign reference
			_lastSeqBlocks 	= copy.deepcopy(seqBlocksExt)
			_lastPosOffsets = copy.deepcopy(posOffsetsExt)
			_lastPosBlocks 	= copy.deepcopy(posBlocksExt)

			processExtension(result, lastFrequent, _lastSeqBlocks, _lastPosOffsets, _lastPosBlocks, seqBlocksList, posOffsetsList, posBlocksList, items, True)
			processExtension(result, lastFrequent, _lastSeqBlocks, _lastPosOffsets, _lastPosBlocks, seqBlocksList, posOffsetsList, posBlocksList, items, False)

			result.append({
				"frequent": lastFrequent,
				"support": supp
			})

			if isSeqExt == True:
				lastFrequent = lastFrequent[:-3]
			else:
				lastFrequent = lastFrequent[:-1]
	return


if __name__ == "__main__":
	(posOffsetsList, posBlocksList) = processEncodePrimalPosAdv(ITEMS, SEQUENCES)
	seqBlocksList = processEncodePrimalSeqAdv(ITEMS, SEQUENCES)

	numberOfItems = len(ITEMS)
	result = [[]] * numberOfItems

	for index in xrange(0, numberOfItems):
		processExtension(result[index], ITEMS[index], 
			seqBlocksList[index], posOffsetsList[index], posBlocksList[index], 
			seqBlocksList, posOffsetsList, posBlocksList,
			ITEMS, True
		)

		processExtension(result[index], ITEMS[index], 
			seqBlocksList[index], posOffsetsList[index], posBlocksList[index], 
			seqBlocksList, posOffsetsList, posBlocksList,
			ITEMS, False
		)

	# for element in result[index]:
	# 	print "{0} - {1}".format(element["frequent"], element["support"])
	
	testCase = "ab"
	# Find a sequence pattern
	for element in result[index]:	 
		isExist = True if element["frequent"].find(testCase) != -1 else False
		if isExist:
			print "{0} - {1}".format(element["frequent"], element["support"])






