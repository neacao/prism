#!/usr/bin/env python

import sys, copy
sys.path.insert(0, '/Users/nea/Desktop/Course/src/advance')

from util import *
from constant import *

from prism_encode_advance import *
from prism_extension_advance import *

def processExtension(result, lastFrequent, lastSeqBlocks, lastOffsets, lastPosBlocks, items, seqBlocksList, posOffsetsList, posBlocksList, isSeqExt):
	lengthOfItems = len(items)

	for itemIndex in xrange(0, lengthOfItems):
		curItem 							= items[itemIndex]
		seqBlockTarget 				= seqBlocksList[itemIndex]
		posOffsetsListTarget 	= posOffsetsList[itemIndex]
		posBlocksTarget 			= posBlocksList[itemIndex]

		# Continue if it's in itemset extension with same item
		if isSeqExt == False and lastFrequent.find(curItem) != -1:
			continue

		# if isSeqExt == True:
		# 	(primalSeqJoin, primalPosJoin) = seqExtension(lastFrequent, curItem, lastSeqBlocks[:], seqBlock[:], lastPosBlocks[:], posBlocks[:])
		# else:
		# 	(primalSeqJoin, primalPosJoin) = itemExtension(lastFrequent, curItem, lastSeqBlocks[:], seqBlock[:], lastPosBlocks[:], posBlocks[:])

		(seqBlocksExt, posOffsetsExt, posBlocksExt) = processExtensionAdv(
			lastFrequent, curItem,
			lastSeqBlocks, seqBlockTarget,
			lastOffsets, posOffsetsListTarget,
			lastPosBlocks, posBlocksTarget,
			isSeqExt
		)

		supp = computeSupportOfPrimalValueArray(seqBlocksExt)
		if supp >= MIN_SUPP:
			if isSeqExt == True:
				lastFrequent += "->{0}".format(curItem)
			else:
				lastFrequent += "{0}".format(curItem)

			# Ensure to make a copy instead of assign reference
			_lastSeqBlocks = copy.deepcopy(seqBlocksExt)
			_lastPosOffsets = copy.deepcopy(posOffsetsExt)
			_lastPosBlocks = copy.deepcopy(posBlocksExt)

			processExtension(result, lastFrequent, _lastSeqBlocks, _lastPosOffsets, _lastPosBlocks, items, seqBlocksList, posOffsetsList ,posBlocksList, True)
			processExtension(result, lastFrequent, _lastSeqBlocks, _lastPosOffsets, _lastPosBlocks, items, seqBlocksList, posOffsetsList, posBlocksList, False)

			result.append({
				"frequent": lastFrequent,
				"support": supp
			})

			if isSeqExt == True:
				lastFrequent = lastFrequent[:-3]
			else:
				lastFrequent = lastFrequent[:-1]
	return


if __name__ == "__main__":
	# posBlocksList = processPrimalEncodingPos()
	# seqBlocksList = processPrimalEncodingSeq()

	(posOffsetsList, posBlocksList) = processEncodePrimalPosAdv(ITEMS, SEQUENCES)
	seqBlocksList = processEncodePrimalSeqAdv(ITEMS, SEQUENCES)

	result = []
	processExtension(result, ITEMS[0], 
		seqBlocksList[0], posOffsetsList[0], posBlocksList[0], 
		ITEMS, seqBlocksList, posOffsetsList, posBlocksList, True)

	for element in result:
		print "{0} - {1}".format(element["frequent"], element["support"])

	# Items extension only



